# This is a basic workflow to help you get started with Actions

name: Build and publish

# Controls when the action will run. 
on:  
  release:
     types:
      - created
      
env:
  RELEASE_TAG: ${GITHUB_REF##*/}
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/update-ovh-dynhost
  

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build-amd:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
            
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Build and push Docker images
        uses: docker/build-push-action@v2.3.0
        with:
          tags: ${{ env.DOCKER_IMAGE }}:latest,${{ env.DOCKER_IMAGE }}:${{ steps.get_version.outputs.VERSION }}
          push: true
      
      - name: Docker Hub Description
        uses: peter-evans/dockerhub-description@v2.1.0
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          DOCKERHUB_REPOSITORY:  ${{ env.DOCKER_IMAGE }}
  
         
  build-arm:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v2
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
    
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to docker registry
        if: success()      
        run: echo -n "${{secrets.DOCKER_PASSWORD}}" | docker login --username "${{secrets.DOCKER_USERNAME}}" --password-stdin ${{secrets.DOCKER_REGISTRY_URL}}

      - name: Build and publish docker image
        if: success()    
        run: docker buildx build --platform linux/arm/v8 --output type=image,push=true -t ${{secrets.DOCKER_REGISTRY_URL}}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.RELEASE_TAG }}-arm64v8 .  
